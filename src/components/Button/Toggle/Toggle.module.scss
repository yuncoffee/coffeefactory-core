@use "../../../styles/var/var";
@use "../../../styles/mixin/mixin";

$transition: var(--transition-slow);
$borderStyle: var(--border-weight-regular) solid;
$shadow: 0 0 3px 2px rgba(var(--black), 0.1);
$shadow__inset1: inset -1px -1px 2px 1px rgba(var(--black), 0.15);

@mixin setToggleSize($size) {
    height: var(--#{$size});
    min-height: var(--#{$size});
    max-height: var(--#{$size});
    width: calc(var(--#{$size}) * 2);
    min-width: calc(var(--#{$size}) * 2);
    max-width: calc(var(--#{$size}) * 2);

    .toggle__core {
        width: calc(var(--#{$size}) - 8px);
        height: calc(var(--#{$size}) - 8px);
    }

    &[data-c-active="true"] {
        .toggle__core {
            transform: translate3d(calc(-50% + var(--#{$size}) / 2), -50%, 0);
        }

        &:active {
            .toggle__core {
                transform: translate3d(
                    calc(-50% + var(--#{$size}) / 2 - 4px),
                    -50%,
                    0
                );
            }
        }
    }

    &[data-c-active="false"] {
        .toggle__core {
            transform: translate3d(calc(-50% - var(--#{$size}) / 2), -50%, 0);
        }

        &:active {
            .toggle__core {
                transform: translate3d(
                    calc(-50% - var(--#{$size}) / 2 + 4px),
                    -50%,
                    0
                );
            }
        }
    }
}

@mixin setButtonColor {
    $base: 200;
    $dark: 300;
    $darkness: 400;
    $darkest: 500;
    $contents: 700;

    &[data-c-color="gray"] {
        background: rgba(var(--gray#{$base}), 1);
        color: rgba(var(--gray#{$contents}), 1);
        border: $borderStyle rgba(var(--gray#{$darkness}), 0);

        @include mixin.focusStyle;

        &:active {
            border: $borderStyle rgba(var(--gray#{$darkness}), 1);
        }

        &:hover {
            background: rgba(var(--gray#{$dark}), 1);
        }

        &:disabled:not([data-c-mono="false"]) {
            background: rgba(var(--gray#{$darkness}), 1);

            .toggle__core {
                background: rgba(var(--gray#{$darkest}), 1);
            }
        }

        &[data-c-active="false"] {
            background: rgba(var(--gray#{$darkness}), 1);

            &:hover {
                background: rgba(var(--gray#{$base}), 1);
            }

            &:disabled:not([data-c-mono="false"]) {
                background: rgba(var(--gray#{$darkness}), 1);

                .toggle__core {
                    background: rgba(var(--gray#{$darkest}), 1);
                }
            }
        }
    }

    @each $key, $value in var.$globalColorList {
        &[data-c-color="#{$key}"] {
            background: rgba(var(--#{$key}-base), 1);
            color: rgba(var(--white), 1);
            border: $borderStyle rgba(var(--#{$key}-darkness), 0);

            @include mixin.focusStyle;

            &:hover {
                background: rgba(var(--#{$key}-lightness), 1);
            }

            &:active {
                border: $borderStyle rgba(var(--#{$key}-darkness), 1);
            }

            &:disabled:not([data-c-mono="false"]) {
                background: rgba(var(--gray#{$darkness}), 1);

                .toggle__core {
                    background: rgba(var(--gray#{$darkest}), 1);
                }
            }

            &[data-c-active="false"] {
                background: rgba(var(--gray#{$darkness}), 1);

                &:hover {
                    background: rgba(var(--#{$key}-light), 0.5);
                }

                &:disabled:not([data-c-mono="false"]) {
                    background: rgba(var(--gray#{$darkness}), 1);

                    .toggle__core {
                        background: rgba(var(--gray#{$darkest}), 1);
                    }
                }
            }
        }
    }
}

.toggle {
    position: relative;
    display: flex;
    border-radius: 100px;
    transition: $transition;

    &__core {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
        transition-property: transform;
        border-radius: 50%;
        background: rgba(var(--white), 1);
        transition: $transition;
        box-shadow: $shadow, $shadow__inset1;
    }

    @each $size, $value in var.$sizeList {
        &[data-c-size="#{$size}"] {
            @include setToggleSize($size);
        }
    }

    @include setButtonColor;
}
